package com.example.accessingdatamysql;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  
  @Autowired
  private RoleRepository roleRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  //@RequestParam does takes values like this 
  //http://localhost:8080/demo/add?name=anoop&email=anoop@gmail.com
  public @ResponseBody String addNewUser (@RequestParam (value="name",required=false) String name 
      , @RequestParam (value="email" ,required=false)String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

		
		
	//	genericRepo.findById(1);
	    Role role=new Role();
	    role.setDescription("role is user");
	    role.setRoleName("USER");
	    role=  roleRepository.save(role);
	
	    List <User> userList=new ArrayList<User>();
	    for(int i=1;i<10;i++){
	    	User n = new User();
			
		    n.setRole(role);
		    n.setName("user"+i);
		    n.setEmail("user"+i+"@gmail.com");
		    userList.add(n);
	    }
		
	    userRepository.saveAll(userList);
	
	    addServer(null);
    
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  
  
  @Autowired
  ServerRepository serverRepository;
  
  @PostMapping("/server")
  public String addServer(@RequestBody (required=false) Server ser){
	  
	  List <Server> serverList=new ArrayList<Server>();
	    
	  for(int i=0;i<10;i++){
		  Server s=new Server();
		  s.setHostName("172.20.186."+i+10);
		  s.setServerPort(""+i+100);
		  s.setServerType("CD_TYPE");
		  serverList.add(s);
	  }
	  
	  serverRepository.saveAll(serverList);
	  addJob(null);
	  return "added succesfully";
  }
  
  
  @Autowired 
  DeploymentJobRepository jobRepository;
  
  
  @Autowired 
  DeploymentJobServerRepository deploymentJobServerRepository;
  
  @PostMapping(value="/job")
  public String addJob(@RequestBody (required=false) DeploymentJob job){
     
	  for(int i=1;i<=3;i++){
		  DeploymentJob job1=new DeploymentJob();
		  job1.setJobName("job"+i);
		  job1.setPackageName("CD_1.0."+i);
		  job1=jobRepository.save(job1);
		  Server s=null;
		  List<DeploymentJobServer>  list=new ArrayList<DeploymentJobServer>();
		  for(int j=1;j<=3;j++){
			  DeploymentJobServer djobServer=  new DeploymentJobServer();
			  Optional<Server> server= serverRepository.findById(i);
			  if(server.isPresent()){
				s= server.get();
			  }else{
			    s= new Server();
				s.setServerIp("172.20.176."+j+10);
				s.setHostName("172.20.176."+j+10);
				
				s.setServerPort("8082");
				s.setServerType("CD_TYPE");
				s=serverRepository.save(s);
			 }
			  djobServer.setJob(job1);
			  djobServer.setStatus("UNPROCESSED");
              djobServer.setServer(s);
              list.add(djobServer);
              deploymentJobServerRepository.saveAll(list);
		  }
	  }
	  
     return "success";
}
  
  
  
  
}

