/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    
    id 'java-library'
  //  id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.3-SNAPSHOT"
    
    //compile "io.springfox:springfox-swagger2:2.3.0"
   // compile "io.springfox:springfox-swagger-ui:2.3.0"
}

		//group = 'com.codewow'
		//version = '0.0.1-SNAPSHOT'
		sourceCompatibility = '1.8'

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
   // jcenter()
    mavenCentral()
}


/*
subprojects {
    if (name.startsWith('hello')) {
        apply plugin: 'org.gradle.sample.hello'
    }
}
*/


subprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }
}


dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'
    //implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//implementation 'org.springframework.boot:spring-boot-starter-web'
	//runtimeOnly 'mysql:mysql-connector-java'
	//testImplementation('org.springframework.boot:spring-boot-starter-test') {
		//exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	//}
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:26.0-jre'

    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
   // compile fileTree(include: ['*.jar'], dir: 'libs')
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.2.5.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.2.5.RELEASE'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.2.5.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.2.5.RELEASE'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.19'
    compile "io.springfox:springfox-swagger2:2.3.0"
    compile "io.springfox:springfox-swagger-ui:2.3.0"
    
    implementation 'io.springfox:springfox-swagger-common:2.3.0'
}

//remove unwanted jars 
configurations {
    all*.exclude module: 'spring-plugin-metadata-1.2.0.RELEASE.jar'
    all*.exclude module: 'spring-plugin-core-1.2.0.RELEASE.jar'
}



//StagingDir:: C:\Users\HP\Build-Folder-Anoop
//taskY.shouldRunAfter taskX
//Authoring task as per the need 
//REF:: https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:task_rules
//gradle tasks -all  list the all gradle available tasks
//grade -q copyJarAndDockerFile
task copyJarAndDockerFile(type: Copy) {
    println 'inside copyJarAndDockerFiletask'
    from "$buildDir/libs/DemoGradle.jar","DockerFile"
    into "C://Users/HP/Build-Folder-Anoop"
}

//@TODO anoop will give it a try
//open docker terminal - bg mode and  and create docker image out of this docker file.
//copy this image to outside world(pull+copy to outside world) 
//this image can be used an input in docker-compose when inter communication required 
//among container over network.
//At last close the gradle process gracefully to release the resources.
//C:/Program Files/Docker Toolbox


//copyJarAndDockerFile
copyJarAndDockerFile.shouldRunAfter build
